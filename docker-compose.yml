version: "3.8"

services:
  nginx:
    image: nginx:alpine
    ports:
      - "880:80"
      - "8443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./django/static:/usr/share/nginx/html/static
      - ./django/media:/usr/share/nginx/html/media
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/certbot
    depends_on:
      - django
      - careerflow
    restart: always
    environment:
      - DOMAIN=${DOMAIN:-localhost}

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d ${DOMAIN}
    profiles: ["ssl"]  # Only run when explicitly called
    restart: "no"
  api:
    build: ./api
    image: proj0_api_image
    ports:
      - 580:80
    volumes:
      - ./api:/api
    # depends_on:
    #   - chroma
    environment:
      # Variables sourced from root .env file or shell
      - DEBUG=${DEBUG:-1} # Example with a default if not set
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2}
      - LANGCHAIN_ENDPOINT=${LANGCHAIN_ENDPOINT}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT}
      # Add any other environment variables your 'api' service needs
    restart: always

  django:
    build: ./django
    image: proj0_django_image
    command: gunicorn proj0.asgi:application -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --workers 4 --log-level info
    
    volumes:
      - ./django:/app
    expose:
      - "8000"
    ports:
     - 8000:8000
    depends_on:
      - db
    environment:
      # Variables sourced from root .env file or shell
      - DEBUG=${DEBUG:-1}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-\*} # Default to '*' if not set
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-proj0.settings}
      - DJANGO_DB_NAME=${DJANGO_DB_NAME}
      - DJANGO_DB_USER=${DJANGO_DB_USER}
      - DJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}
      - DJANGO_DB_HOST=${DJANGO_DB_HOST:-db}
      - DJANGO_DB_PORT=${DJANGO_DB_PORT:-5432}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID} # Assuming Django uses the same as careerflow
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET} # Assuming Django uses the same
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - AI_SERVICE_URL=${AI_SERVICE_URL:-http://api:80/resumes/}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED:-1}
      # Add any other environment variables your 'django' service needs
    restart: always

  db:
    image: postgres:16
    environment:
      # Variables sourced from root .env file or shell, crucial for PostgreSQL initialization
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  redis:
    image: redis:6.2-alpine
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: always

  celery:
    build: ./django # Assuming celery uses the same Django environment
    image: proj0_django_image
    command: celery -A proj0 worker -l info
    volumes:
      - ./django:/app
    depends_on:
      - db
      - redis
    environment:
      # Variables sourced from root .env file or shell, mirroring Django's needs
      - DEBUG=${DEBUG:-1}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-\*}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-proj0.settings}
      - DJANGO_DB_NAME=${DJANGO_DB_NAME}
      - DJANGO_DB_USER=${DJANGO_DB_USER}
      - DJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}
      - DJANGO_DB_HOST=${DJANGO_DB_HOST:-db}
      - DJANGO_DB_PORT=${DJANGO_DB_PORT:-5432}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED:-1}
      - AI_SERVICE_URL=${AI_SERVICE_URL:-http://api:80/resumes/}
      # Add specific Celery variables if any, e.g., C_FORCE_ROOT, BROKER_URL (if not in Django settings)
      # Ensure all variables needed by your Django settings for Celery are present
    restart: always

  careerflow:
    build:
      context: ./careerflow
      args:
        - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_AI_API_URL=${NEXT_PUBLIC_AI_API_URL}
        - NEXT_PUBLIC_IPDATA_API_KEY=${NEXT_PUBLIC_IPDATA_API_KEY}
        
    environment:
      # Runtime environment variables sourced from root .env file or shell
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL} # For runtime
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}         # For runtime
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_TELEMETRY_DISABLED=${NEXT_TELEMETRY_DISABLED:-1}
      - NEXTAUTH_BACKEND_URL=${NEXTAUTH_BACKEND_URL}
      - NEXT_PUBLIC_AI_API_URL=${NEXT_PUBLIC_AI_API_URL:-http://api:80/resumes/}
      # Add any other environment variables your 'careerflow' service needs at runtime
    image: careerflow_frontend_image
    ports:
      - "3000:3000"
    depends_on:
      - api
      - django
    restart: always

volumes:
  postgres_data:
  redis_data:
  certbot-etc:
  certbot-var:
  web-root: