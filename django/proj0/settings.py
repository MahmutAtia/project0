"""
Django settings for proj0 project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-u$04p_1&)e*=o+scbzp4x()8w2er8g1l28_$hep47p&fx5&#wp"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "True") == "True"

# Update this with your actual domain(s) in production
CSRF_TRUSTED_ORIGINS = [origin for origin in os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "").split(",") if origin]

ALLOWED_HOSTS = [host for host in os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") if host]
if "django" not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append("django")


if not DEBUG:
    # 1. Critical: Mark cookies as Secure (HTTPS only)
    # This is necessary because Nginx is terminating the SSL connection (HTTPS),
    # and Django must set the cookie's 'Secure' flag for the browser to accept it.
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    # 2. Critical: Tell Django it is behind an HTTPS proxy
    # This tells Django to trust the 'X-Forwarded-Proto' header set by Nginx.
    # Your Nginx config sets 'X-Forwarded-Proto https', and this setting makes Django use it.
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    # 3. Optional but Recommended: For the Admin site
    # If you are using the Django admin specifically, this helps prevent mixed content warnings.
    # Only set this if the above fixes don't fully resolve the admin issue.
    SECURE_SSL_REDIRECT = True

# For development, allow all ngrok subdomains
if DEBUG:
    ALLOWED_HOSTS.extend([
        "*.ngrok-free.app",
        "*.ngrok.io", 
        "*.ngrok.app",
        ".ngrok-free.app",  # Also add dot prefix versions
        ".ngrok.io",
        ".ngrok.app"
    ])

# Application definition


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # installed apps
    "rest_framework",
    "rest_framework.authtoken",  # If using DRF's TokenAuth
    "rest_framework_simplejwt",  # JWT authentication
    "corsheaders",  # For CORS
    "rest_framework_simplejwt.token_blacklist",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "drf_yasg",
    # third-party apps
    # custom apps
    "api",
    "accounts",
    "plans",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "proj0.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, 'html_templates'),  # Add html_templates directory
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
]


WSGI_APPLICATION = "proj0.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "postgres"),
        "USER": os.getenv("POSTGRES_USER", "postgres"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "postgres"),
        "HOST": "db",
        "PORT": 5432,
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")  # Add this line

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"



SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


# Auth Settings
REST_USE_JWT = True
JWT_AUTH_COOKIE = "auth"
JWT_AUTH_REFRESH_COOKIE = "refresh"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}


AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)

SITE_ID = 1  # Important for django-allauth


ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = "username_email"


# CORS configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Your Next.js frontend URL
    "http://localhost:880",  # <-- Add this line
]
CORS_ALLOW_CREDENTIALS = True  # Allow cookies to be sent+


# Allow all HTTP methods
CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
]

# Auth Settings


REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_HTTPONLY": False,
}

# JWT Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=20),  # Increased from 100 to 20 minutes for better balance
    "REFRESH_TOKEN_LIFETIME": timedelta(days=2),
    "ALGORITHM": os.getenv("JWT_ALGORITHM", "HS256"),
    "SIGNING_KEY": os.getenv("JWT_SECRET_KEY"),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "BLACKLIST_AFTER_ROTATION": True,
    "ROTATE_REFRESH_TOKENS": True,
}


# Email Settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

# Auth Settings
# ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True


# --- ADD or MODIFY these lines ---
ACCOUNT_LOGIN_METHODS = {"email"}  # Or {'username'}, {'username', 'email'}
ACCOUNT_SIGNUP_FIELDS = [
    "email*",
    "password1*",
    "password2*",
]  # Add 'username*' if needed
ACCOUNT_EMAIL_VERIFICATION = "none"  # Example: Keep other allauth settings
# ---
ACCOUNT_EMAIL_SUBJECT_PREFIX = "Your Site - "


# Adapter for social login if email is already in use
SOCIALACCOUNT_ADAPTER = "accounts.adapter.MySocialAccountAdapter"


SITE_ID = 1


SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": os.getenv("GOOGLE_CLIENT_ID"),
            "secret": os.getenv("GOOGLE_CLIENT_SECRET"),
            "key": "",
        },
        "SCOPE": [
            "profile",
            "email",
            "openid",
        ],
        "AUTH_PARAMS": {
            "access_type": "offline",
            "prompt": "consent",
            "response_type": "code",
        },
    }
}

# urls related in django in general
APPEND_SLASH = True


# Celery Configuration Options
# Make sure this URL points to your running broker service
# Example for Redis (if running in Docker with service name 'redis'):
# Example for RabbitMQ (if running in Docker with service name 'rabbitmq'):
# CELERY_BROKER_URL = 'amqp://guest:guest@rabbitmq:5672//'
# Example for Redis running locally on default port:
# CELERY_BROKER_URL = 'redis://localhost:6379/0'


# Polar Settings
POLAR_API_KEY = os.environ.get("POLAR_API_KEY")
POLAR_WEBHOOK_SECRET = os.environ.get("POLAR_WEBHOOK_SECRET")


# Payment settings
PAYMENT_HOST = os.getenv("PAYMENT_HOST", "localhost:3000")  # Frontend host for redirects
